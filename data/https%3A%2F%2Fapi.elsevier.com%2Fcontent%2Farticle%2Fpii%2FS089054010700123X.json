{"scopus-eid": "2-s2.0-40149083066", "originalText": "serial JL 272575 291210 291812 291867 31 80 Information and Computation INFORMATIONCOMPUTATION 2007-11-28 2007-11-28 2010-04-18T13:21:16 1-s2.0-S089054010700123X S0890-5401(07)00123-X S089054010700123X 10.1016/j.ic.2007.05.005 S300 S300.1 HEAD-AND-TAIL 1-s2.0-S0890540108X00021 2015-05-15T02:28:02.038416-04:00 0 0 20080201 20080430 2008 2007-11-28T00:00:00Z rawtext articleinfo crossmark dco dateupdated tomb dateloaded datesearch indexeddate issuelist volumelist yearnav articletitlenorm authfirstinitialnorm authfirstsurnamenorm cid cids confeditor contenttype copyright dateloadedtxt docsubtype doctype doi eid ewtransactionid hubeid issfirst issn issnnorm itemstage itemtransactionid itemweight oauserlicense openaccess openarchive pg pgfirst pglast pii piinorm pubdateend pubdatestart pubdatetxt pubyr sortorder srctitle srctitlenorm srctype vol volfirst volissue webpdf webpdfpagecount affil articletitle auth authfirstini authfull authkeywords authlast primabst ref alllist content oa subj ssids 0890-5401 08905401 206 206 2 4 2 3 4 Volume 206, Issues 2\u20134 14 402 424 402 424 200802 200804 February\u2013April 2008 2008-02-01 2008-04-30 2008 Joint Workshop on Foundations of Computer Security and Automated Reasoning for Security Protocol Analysis (FCS-ARSPA \u201906) Pierpaolo Degano a Ralf K\u00fcsters b Luca Vigan\u00f2 c Steve Zdancewic d a Dipartimento di Informatica, Universit\u00e0 di Pisa, Italy b Department of Computer Science, ETH Zurich, Switzerland c Dipartimento di Informatica, Universit\u00e0 di Verona, Italy d Department of Computer and Information Science, University of Pennsylvania, USA article fla Copyright \u00a9 2007 Elsevier Inc. All rights reserved. BREAKINGFIXINGPUBLICKEYKERBEROS CERVESATO I BUTLER 2006 57 87 F ABADI 2005 102 146 M VIGANO 2006 61 86 L ARMANDO 2005 281 285 A CAV AVISPATOOLFORAUTOMATEDVALIDATIONINTERNETSECURITYPROTOCOLSAPPLICATIONS KEMMERER 1994 79 130 R GOLDWASSER 1988 281 308 S DURGIN 2004 247 311 N DIFFIE 1992 107 125 W NEEDHAM 1978 993 999 R CLARK 1995 151 155 J HWANG 1995 91 101 T ABADI 1996 6 15 M DOLEV 1983 198 208 D CERVESATOX2008X402 CERVESATOX2008X402X424 CERVESATOX2008X402XI CERVESATOX2008X402X424XI Full 2013-07-17T08:25:50Z ElsevierBranded OA-Window http://www.elsevier.com/open-access/userlicense/1.0/ item S0890-5401(07)00123-X S089054010700123X 1-s2.0-S089054010700123X 10.1016/j.ic.2007.05.005 272575 2010-10-11T03:18:57.569644-04:00 2008-02-01 2008-04-30 1-s2.0-S089054010700123X-main.pdf https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S089054010700123X/MAIN/application/pdf/d07ff1bd747eb4ffb8b912f7fbd8248b/main.pdf https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S089054010700123X/MAIN/application/pdf/d07ff1bd747eb4ffb8b912f7fbd8248b/main.pdf main.pdf pdf true 1071209 MAIN 23 1-s2.0-S089054010700123X-main_1.png https://s3.amazonaws.com/prod-ucs-content-store-us-east/content/pii:S089054010700123X/PREVIEW/image/png/08208b0b70667c80b0786ba0fe9af5a4/main_1.png https://s3-eu-west-1.amazonaws.com/prod-ucs-content-store-eu-west/content/pii:S089054010700123X/PREVIEW/image/png/08208b0b70667c80b0786ba0fe9af5a4/main_1.png main_1.png png 59873 849 656 IMAGE-WEB-PDF 1 Available online at www.sciencedirect.com Information and Computation 206 (2008) 402\u2013424 www.elsevier.com/locate/ic Breaking and fixing public-key Kerberos H32891 Iliano Cervesato a , Aaron D. Jaggard b , Andre Scedrov c , Joe-Kai Tsay c,\u2217 , Christopher Walstad d a Carnegie Mellon University in Qatar, P.O. Box 42866, Doha, Qatar b DIMACS, Rutgers University, 96 Frelinghuysen Rd., Piscataway, NJ 08854 c University of Pennsylvania, Department of Mathematics, 209 S. 33rd St., Philadelphia, PA 19104, USA d University of Pennsylvania, School of Engineering and Applied Science, 220 S. 33rd St., Philadelphia, PA 19104, USA Received 10 November 2006; revised 21 May 2007 Available online 28 November 2007 Abstract We report on a man-in-the-middle attack on PKINIT, the public key extension of the widely deployed Kerberos 5 authentication protocol. This flaw allows an attacker to impersonate Kerberos administrative principals (KDC) and end- servers to a client, hence breaching the authentication guarantees of Kerberos. It also gives the attacker the keys that the KDC would normally generate to encrypt the service requests of this client, hence defeating confidentiality as well. The discovery of this attack caused the IETF to change the specification of PKINIT and Microsoft to release a security update for some Windows operating systems. We discovered this attack as part of an ongoing formal analysis of the Kerberos protocol suite, and we have formally verified several possible fixes to PKINIT\u2014including the one adopted by the IETF\u2014that prevent our attack as well as other authentication and secrecy properties of Kerberos with PKINIT. \u00a9 2007 Elsevier Inc. All rights reserved. Keywords: Computer security; Authentication protocols; Kerberos; PKINIT; Man-in-the-middle attack; Protocol verification 1. Introduction Kerberos [1] is a successful, widely deployed single sign-on protocol that is designed to authenticate clients to multiple networked services, e.g., remote hosts, file servers, or print spoolers. Kerberos 5, the most recent version, is available for all major operating systems: Microsoft has included it in its Windows operating system, it is H32891 Cervesato was partially supported by the Qatar Foundation under grant number 930107, with early aspects of this work supported by ONR under grants N00014-99-1-0150 and N00014-01-1-0795. Jaggard was partially supported by NSF Grants DMS-0239996 and CNS- 0429689 and by ONR Grant N00014-05-1-0818; this work was done while he was at Tulane University and, in part, while he was a Visiting Scholar in the Mathematics Department at the University of Pennsylvania. Scedrov, Tsay, and Walstad were partially supported by OSD/ONR CIP/SW URI \u201cSoftware Quality and Infrastructure Protection for Diffuse Computing\u201d through ONR Grant N00014-01-1-0795 and OSD/ONR CIP/SW URI \u201cTrustworthy Infrastructure, Mechanisms, and Experimentation for Diffuse Computing\u201d through ONR Grant N00014-04-1-0725. Additional support from NSF Grants CNS-0429689 and CNS-0524059. \u2217 Corresponding author. E-mail addresses: iliano@cmu.edu (I. Cervesato), adj@dimacs.rutgers.edu (A.D. Jaggard), scedrov@math.upenn.edu(A. Scedrov), jetsay@math.upenn.edu (J.-K. Tsay), cwalstad@seas.upenn.edu (C. Walstad). 0890-5401/$ - see front matter \u00a9 2007 Elsevier Inc. All rights reserved. doi:10.1016/j.ic.2007.05.005 I. Cervesato et al. / Information and Computation 206 (2008) 402\u2013424 403 available for Linux under the name Heimdal, and commercial Unix variants as well as Apple\u2019s OS X use code from the MIT implementation of Kerberos 5. Furthermore, it is being used as a building block for higher-level protocols [2]. Introduced in the early 1990s [3], Kerberos 5 continues to evolve as new functionalities are added to the basic protocol. One of these extensions, known as PKINIT, modifies the basic protocol to allow public-key authentication and in the process adds considerable complexity to the protocol. Here we report a protocol-level attack on PKINIT and discuss the constructive process of fixing it. We have verified a few defenses against our attack, including one we suggested, a different one proposed in the IETF Kerberos working group (and included the final PKINIT specification), and a generalization of these two approaches. A Kerberos session generally starts with a user logging onto a system. This triggers the creation of a client process that will transparently handle all her authentication requests. The initial authentication between the client and the Kerberos administrative principals (altogether known as the KDC, for Key Distribution Center) is traditionally based on a shared key derived from a password chosen by the user. PKINIT is intended to add flexibility, security and administrative convenience by replacing this static shared secret with two pairs of public/private keys, one assigned to the KDC and one belonging to the user. PKINIT is supported by Kerberized versions of Microsoft Windows, typically for use with smartcard authentication, including Windows 2000 Professional and Server, Windows XP, Windows Server 2003 and now Windows Vista [4]; it has also been included in Heimdal since 2002 [5]. The MIT reference implementation is being extended with PKINIT. The flaw we have uncovered in PKINIT allows an attacker to impersonate the KDC, and therefore all the Kerberized services, to a user, hence defeating authentication of the server to the client. The attacker also obtains all the keys that the KDC would normally generate for the client to encrypt her service requests, hence compromising confidentiality as well. This is a protocol-level attack and was a flaw in the then-current specification, not just a particular implementation. In contrast to recently reported attacks on Kerberos 4 [6], our attack does not use an oracle, but is efficiently mounted in constant time by simply decrypting a message with one key, changing one important value, and re-encrypting it with the victim\u2019s public key. The consequences of this attack are quite serious. For example, the attacker could monitor communication between an honest client and a Kerberized network file server. This would allow the attacker to read the files that the client believes are being securely transferred to the file server. Our attack is possible because the two messages constituting PKINIT were insufficiently bound to each other. 1 More precisely, the reply (the second message of this exchange) can easily be modified so that it appears to correspond to a request (the first message) sent by a client different from the one the reply is generated for. Assumptions required for this attack are that the attacker is a legal user, that he can intercept other clients\u2019 requests, and that PKINIT is used in \u201cpublic-key encryption mode\u201d. The alternative \u201cDiffie\u2013Hellman (DH) mode\u201d does not appear vulnerable to this attack; we are in the process of proving its full security. We discovered this attack as part of an ongoing formal analysis of the Kerberos 5 protocol suite. Our earlier work on Kerberos successfully employed formal methods for the verification of the authentication properties of basic intra-realm Kerberos 5 [7,8] and of cross-realm authentication [8,9]. Although our work is carried out by hand, a variety of automated approaches exist for symbolic proofs [10\u201317] and have also been applied to deployed protocols (e.g., [18\u201320]). In a recent collaboration with M. Backes, we have started extending our results from the abstract Dolev\u2013Yao model examined here to the more concrete computational model [21]. Interestingly, the results described in more detail here served as a blueprint for the much more fine-grained proofs in [21]. Furthermore, we have started exploring automated security proofs of Kerberos [22] using the tool CryptoVerif [23,24], which works directly within the computational model. After discovering the attack on PKINIT, we worked in close collaboration with the IETF Kerberos Working Group, in particular with the authors of the PKINIT specification documents, to correct the problem. Our contribution in this regard has been a formal analysis of a general countermeasure to this attack, as well as the particular instance proposed by the Working Group that has been adopted in the PKINIT specification [25]. Our attack led to an August 2005 Microsoft Security Bulletin and patch [4]. It was also recorded as a CERT advisory [26]. This paper extends our preliminary report [27] with additional authentication properties, full proofs of our results, and a more complete discussion of our techniques, formalization, and the protocol itself. 1 The possibility of an \u2018identity misbinding\u2019 attack was independently hypothesized by Ran Canetti, whom we consulted on some details of the specification. 404 I. Cervesato et al. / Information and Computation 206 (2008) 402\u2013424 Fig. 1. An Overview of Kerberos Authentication. Below, in Section 2 we recall the structure of Kerberos and give a detailed description of PKINIT. In Section 3 we provide an account of the attack we uncovered and outline its consequences. In Section 4 we discuss various approaches to prevent the attack, including the one adopted by the IETF Kerberos working group in response to our work. In Section 5 we review our representation language, MSR, and use it to formalize the fixed version of PKINIT; we give some of our formal results\u2014that the fixed version does prevent our attack and that both the broken and fixed versions have other authentication and secrecy properties\u2014in Section 6. Section 7 provides some concluding remarks. 2. Kerberos 5 and its public-key extension The Kerberos protocol [1] allows a legitimate user to log on to her terminal once a day (typically) and then transparently access all the networked resources she needs in her organization for the rest of that day. Each time she wants to retrieve a file from a remote server, for example, Kerberos securely handles the required authentication behind the scene, without any user intervention. We now review how Kerberos provides secure authentication based on a single logon. As we do this, we will be particularly interested in the initial exchange, which happens when the user first logs onto the system. Figure 1 gives an overview of the message flow for the entire Kerberos protocol; Fig. 4 below refines this to show some of the message details for the basic protocol. We start this section with a detailed review of the first exchange in the protocol, both with and without PKINIT. 2.1. Kerberos basics The client process\u2014usually acting on behalf of a human user\u2014interacts with three other types of principals during the three rounds of Kerberos 5 (with or without PKINIT). The client\u2019s goal is to be able to authen- ticate herself to various application servers (e.g., email, file, and print servers). This is done by first obtaining credentials, called the \u201cticket-granting ticket\u201d (TGT), from a \u201cKerberos Authentication Server\u201d (KAS) and then by presenting these credentials to a \u201cTicket-Granting Server\u201d (TGS) in order to obtain a \u201cservice ticket\u201d (ST), which is the credentials that the client finally presents to the application servers in order to authenticate herself (see Fig. 1). A TGT might be valid for a day, and may be used to obtain several STs for many different application servers from the TGS, while a single ST might be valid for a few minutes (although it, too, may be used repeatedly while it is still valid) and is used for a single application server. The KAS and the TGS are altogether known as the \u201cKey Distribution Center\u201d (KDC). The client\u2019s interactions with the KAS, TGS, and application servers are called the Authentication Service (AS), Ticket-Granting (TG), and Client-Server (CS) exchanges, respectively. The focus of this work will be the AS exchange, as PKINIT does not alter the remaining parts of Kerberos. I. Cervesato et al. / Information and Computation 206 (2008) 402\u2013424 405 Fig. 2. Message Flow in the Traditional AS Exchange whereTGT ={AK,C,t K } k T . The traditional authentication service exchange. The abstract structure of the messages in the traditional (non- PKINIT) AS exchange is given in Fig. 2. A clientCgenerates a fresh noncen 1 and sends it, together with her own name and the nameT of the TGS for whom she desires a TGT, to the KAS. The KAS responds by generating a fresh keyAK for use between the client and the TGS. This key is sent back to the client, along with the nonce (n 1 ) from the request, at timestamp (t K ) and other data, encrypted under a long-term keyk C shared betweenC and the KAS; this long-term key is usually derived from the user\u2019s password. We write {m} k for the encryption of m with symmetric key k. This is the only time that this long-term key is used in a standard Kerberos run because later exchanges use freshly generated keys. AK is also included in the TGT, sent alongside the message encrypted for the client. The TGT is encrypted under a long-term keyk T shared between the KAS and the TGS named in the request. These encrypted messages are accompanied by the client\u2019s name\u2014and other data that we abstract away\u2014sent in the clear. Once the client has received this reply, she may undertake the ticket-granting exchange. It should be noted that the actual AS exchange, as well as the other exchanges in Kerberos, are more complex than the abstract view given here; the details we omit here do not affect our results and including them would only obscure their exposition. We refer the reader to [1] for the complete specification of Kerberos 5, and to [7] for a formalization at an intermediate level of detail. Security considerations. One weakness of the standard Kerberos protocol is that the keyk C used to encrypt the client\u2019s credentials is derived from a password, and passwords are notoriously vulnerable to dictionary attacks [1]. Moreover, since the initial request is entirely plaintext, an active attacker can repeatedly make requests for an honest client\u2019s credentials and amass a large quantity of plaintext-ciphertext pairs, the latter component being encrypted with the client\u2019s long-term keyk C . While the attacker is unable to use these credentials to authenticate to the system, he is given considerable opportunity to perform an active dictionary attack against the key. Kerberos can optionally use pre-authentication, a feature that is designed to prevent an attacker from actively requesting and obtaining credentials for an honest user. In brief, pre-authentication works by requiring the client to include a timestamp encrypted with her long-term key (k C ) in the initial request. The authentication server will only return credentials if the decrypted timestamp is sufficiently recent. This method successfully prevents an attacker from actively obtaining ciphertext encrypted with the long-term key; however, it does not prevent passive dictionary attacks, i.e., a passive attacker could eavesdrop on network communications, record credentials as the honest client requests them, and attempt off-line dictionary decryption. Thus, pre- authentication makes it slower for an attacker to perform cryptanalysis against the user\u2019s long-term key, but it does not fully prevent the vulnerability. One goal of PKINIT is to eliminate the possibility of this dictionary attack. 2.2. Public-key Kerberos PKINIT [25] is an extension to Kerberos 5 that uses public-key cryptography to avoid shared secrets between aclientandKAS;itmodifiestheASexchangebutnototherpartsofthebasicKerberos5protocol.Aswejustsaw, the long-term shared key (k C ) in the traditional AS exchange is typically derived from a password, which limits the strength of the authentication to the user\u2019s ability to choose and remember good passwords; PKINIT does not usek C and thus avoids this problem. Furthermore, PKINIT allows network administrators to use an existing public-key infrastructure (PKI) rather than expend additional effort to manage users\u2019 long-term keys needed for traditional Kerberos. This protocol extension adds complexity to Kerberos as it retains symmetric encryption in the later rounds but relies on asymmetric encryption, digital signatures, and corresponding certificates in the first round. 406 I. Cervesato et al. / Information and Computation 206 (2008) 402\u2013424 Fig. 3. Message Flow in PKINIT-26 , whereTGT ={AK,C,t K } k T . In PKINIT, the clientC and the KAS possess independent public/secret key pairs,(pk C ,sk C )and(pk K ,sk K ), respectively. Certificate setsCert C andCert K issued by a PKI independent from Kerberos are used to testify of the binding between each principal and her purported public key. This simplifies administration as authentication decisions can now be made based on the trust the KDC holds in just a few known certification authorities within the PKI, rather than keys individually shared with each client (local policies can, however, still be installed for user-by-user authentication). Dictionary attacks are defeated as user-chosen passwords are replaced with automaticallygeneratedasymmetrickeys.Theloginprocesschangesasveryfewuserswouldbeabletoremember a random public/secret key pair. In Microsoft Windows, keys and certificate chains are stored in a smartcard that the user swipes in a reader at login time. A passphrase is generally required as an additional security measure [28]. Other possibilities include keeping these credentials on the user\u2019s hard drive, again protected by a passphrase. The manner in which PKINIT works depends on both the protocol version and the mode invoked. As the PKINIT extension to Kerberos has recently been published as RFC 4556 after a sequence of Internet Drafts [25], we use \u201cPKINIT-n\u201d to refer to the protocol as specified in thenth draft revision and \u201cPKINIT\u201d for the protocol more generally. These various drafts and the RFC can be found at [25]. We discovered the attack described in Section 3 when studying PKINIT-25; our description of the vulnerable protocol is based on PKINIT-26, which does not differ from PKINIT-25 in ways that affect the attack. In response to our work described here, PKINIT-27 included a defense against our attack; we discuss this fix in Section 4. The version of the protocol defined in RFC 4556 does not differ from the parts of PKINIT-27 that we discuss here. PKINIT can operate in two modes. In public-key encryption mode, the key pairs(pk C ,sk C )and(pk K ,sk K )are used for both signature and encryption. The latter is designed to (indirectly) protect the confidentiality of AK, while the former ensures its integrity. In Diffie\u2013Hellman (DH) mode, the key pairs are used to provide digital signature support for an authenticated Diffie\u2013Hellman key agreement which is used to protect the fresh key AK shared between the client and KAS. A variant of this mode allows the reuse of previously generated shared secrets. We will not discuss the DH mode in detail as our preliminary investigation did not reveal any flaw in it; we are currently working on a complete analysis of this mode. Furthermore, it appears not to have yet been included in any of the major operating systems. The only support we are aware of is within the PacketCable system [29], developed by CableLabs, a cable television research consortium. Figure 3 illustrates the AS exchange in public-key encryption mode as of PKINIT-26. The differences with respect to the traditional AS exchange (see Fig. 2) have been highlighted using boxes. In discussing this and other descriptions of the protocol, we write [m] sk for the digital signature of message m with secret key sk. (PKINIT realizes digital signatures by concatenating the message and a keyed hash for it, occasionally with other data in between.) In our analysis of PKINIT in Section 6, we make the standard assumption that digital signatures are unforgeable [30]. The encryption ofmwith public keypkis denoted {{m}} pk . As before, we write {m} k for the encryption ofmwith symmetric keyk. The first line of Fig. 3 describes the relevant parts of the request that a client C sends to a KAS K using PKINIT-26. The last part of the message\u2014C,T,n 1 \u2014is exactly as in basic Kerberos 5, containing the client\u2019s name, the name of the TGS for which she wants a TGT, and a nonce. The boxed parts added by PKINIT include the client\u2019s certificatesCert C and her signature (with her secret keysk C ) over a timestampt C and another nonce n 2 . (The nonces and timestamp to the left of this line indicate that these are generated byC specifically for this request, with the box indicating data not included in our abstract formalization of basic Kerberos 5 [7,8].) This effectively implements a form of pre-authentication. The second line in Fig. 3 shows our formalization of K\u2019s response, which is more complex than in basic Kerberos. The last part of the message\u2014C,TGT, {AK,n 1 ,t K ,T} k \u2014is very similar toK\u2019s reply in basic Kerberos; I. Cervesato et al. / Information and Computation 206 (2008) 402\u2013424 407 Fig. 4. Message flow in basic Kerberos. the difference (boxed) is that the symmetric key k protecting AK is now freshly generated by K and not a long-term shared key. The ticket-granting-ticket TGT and the message encrypted underk are as in traditional Kerberos. Becausek is freshly generated for the reply, it must be communicated toC before she can learnAK. PKINIT does this by adding the message {{Cert K , [k,n 2 ] sk K }} pk C . This containsK\u2019s certificates and his signature, using his secret keysk K , overk and the noncen 2 fromC\u2019s request; all of this is encrypted underC\u2019s public key pk C . This abstract description leaves out a number of fields which are of no significance with respect to the reported attack or its fix. We invite the interested reader to consult the specifications [25]. Also, recall that PKINIT leaves the subsequent exchanges of Kerberos unchanged. 2.3. Message flow in later exchanges For the sake of completeness, we give a brief overview of the message structure in the remaining rounds of Kerberos; Section 3.3 discusses how the attack on PKINIT can be propagated through these later rounds. Figure 4 updates Fig. 1 to show the details of the messages in basic Kerberos. PKINIT modifies the first two of these messages as illustrated in Fig. 3. The AS exchange (either traditional or with PKINIT) provides the client with an authentication keyAK and a ticket-granting-ticketTGT ={AK,C,t K } k T . In the TG exchange,Cthen requests an ST fromT after generating a new noncen 3 and timestamp; her request includes the TGT (which she cannot read but simply forwards from K), an authenticator {C,t C } AK containing her name and timestamp and encrypted withAK, the name of the serverS for which she wants an ST, and the new nonce. T\u2019s response has the same structure as K\u2019s, but now with an ST in place of the TGT and S taking the role ofT in the rest of the message. Finally, in the CS exchange, C authenticates herself to S by sending the ST and an authenticator {C,t prime C } SK containing her name and timestamp, and encrypted under the fresh key SK. S may authenticate himself back toC by encryptingC\u2019s timestamp (but notC\u2019s name, so that the result differs from the authenticator) withSK and returning this message toC. 3. The attack In this section, we report on a dangerous attack against PKINIT in public-key encryption mode. We discov- ered this attack as we were interpreting the specification documents of this protocol [25] in preparation for its 408 I. Cervesato et al. / Information and Computation 206 (2008) 402\u2013424 Fig. 5. Message flow in the man-in-the-middle attack on PKINIT-26, whereTGT ={AK, I,t K } k T . formalization in MSR [9,31,32], the specification language for our analysis. We start with a detailed description of the attacker\u2019s actions in the AS exchange, the key to the attack. We then review the conditions required for the attack and close this section with a discussion of how the attacker may propagate the effects of her AS exchange actions throughout the rest of a protocol run. 3.1. Message flow Figure 5 shows the AS exchange message flow in the attack. The client C sends a request to the KAS K which is intercepted by the attacker I, who constructs his own request message using the parameters fromC\u2019s message. All data signed byC are sent unencrypted\u2014indeed [msg] sk can be understood as an abbreviation for the plaintext msg together with a keyed hash of the message\u2014so that I may generate his own signatures over data from C\u2019s request. The result is a well-formed request message from I, although constructed using some data originating withC. I\u2019s changes to the request message are boxed above the top-right arrow of Fig. 5. (We have omitted an unkeyed checksum taken over unencrypted data from these messages; I can regenerate this as needed to produce a valid request.) I forwards the fabricated request to the KASK, who views it as a valid request for credentials if I is himself a legitimate client; there is nothing to indicate that some of the data originated withC.K responds with a reply containing credentials for I (the bottom-right arrow in Fig. 5). The TGT has the form {AK,I,t K } k T ; note that, because it is encrypted with the key k T shared between K and the TGS T, it is opaque to C (and I). Another part of the reply is encrypted using the public key of the client for whom the credentials are generated, in this case I. This allows the attacker to decrypt this part of the message using his private key, learn the key k, and use this to learn the keyAK. An honest client would only use this information to send a request message to the TGST. Instead, I usesC\u2019s public key to re-encrypt the data he decrypted using his private key (having learned pk C , if necessary, fromCert C in the original request), replaces his name withC\u2019s, and forwards the result toC. ToC this message appears to be a valid reply fromK generated in response toC\u2019s initial request (recall thatC cannot read I\u2019s name inside the TGT). At this point,C believes she has authenticated herself to the KAS and that the credentials she has obtained\u2014 the keyAK and the accompanying TGT\u2014were generated for her. However, the KAS has completed the PKINIT exchange with I and has generated AK and the TGT for I. The attacker knows the key AK (as well as k, which is not used other than to encryptAK) and can therefore decrypt any message thatC would protect with it. Protocol-level attacks in the same vein of the vulnerability we uncovered have been reported in the literature for other protocols. In 1992, Diffie, van Oorschot, and Wiener noted that a signature-based variant of the Station- to-Station protocol [33] could be defeated by a man-in-the-middle (MITM) attack which bears similarities to what we observed in the first half of our vulnerability; in 2003 Canetti and Krawczyk [34] observed that the \u201cbasic authenticated Diffie\u2013Hellman\u201d mode of the Internet Key Exchange protocol (IKE) [35] had this very same vulnerability. In 1996, Lowe [36] found an attack on the Needham\u2013Schroeder public-key protocol [37] that manipulates public-key encryption essentially in the same way as what happens in the second half of our attack. Because it alters both signatures and asymmetric encryptions, our attack against PKINIT stems from both [36,33]. In 1995, Clark and Jacob [38] discovered a similar flaw on Hwang and Chen\u2019s corrected SPLICE/AS protocol [39]. I. Cervesato et al. / Information and Computation 206 (2008) 402\u2013424 409 Fig. 6. Message flow in the man-in-the-middle attack on PKINIT-26, after the messages in Fig. 5, when the attacker forwards and observes traffic; hereTGT ={AK,I,t K } k T andST ={SK, I,t T } k S . 3.2. Assumptions In order for this attack to work, the attacker must be a legal Kerberos client so that the KAS will grant him credentials. In particular, he must possess a public/secret key pair (pk I ,sk I ) and valid certificates Cert I trusted by the KAS. The attacker must also be able to intercept messages, which is a standard assumption. Finally, PKINIT must be used in public-key encryption mode, which is commonly done as the alternative DH mode does not appear to be readily available, except for domain specific systems [28,29]. 3.3. Effects of the attack Attackerobservestraffic. Once the attacker learnsAKin the AS exchange, he may either mediateC\u2019s interactions with the various servers (essentially logging in as I while leaking data toCso she believes she has logged in) while observing this traffic or simply impersonate the servers in the later exchanges. In the first variant, which is shown in Fig. 6, onceChasAKand a TGT, she would normally contact the TGS to get an ST for some application server S. This request contains an authenticator of the form {C,t C,T } AK (i.e.,C\u2019s name and a timestamp, encrypted with AK). Because I knows AK, he may intercept the request and replace the authenticator with one that refers to himself: {I,t I,T } AK . The reply from the TGS contains a freshly generated keySK; this is encrypted underAK, for C to read and thus accessible to I, and also included in an ST that is opaque to all but the TGS and application server. I may intercept this message and learnSK, replace an instance of his name withC\u2019s name, and forward the result to C.AsI knows SK, he can carry out a similar MITM attack on the CS exchange, replacing the authenticator {C,t C,S } SK with the authenticator {I,t I,S } SK and then replacing the server\u2019s reply {t I,S } SK with the reply {t C,S } SK that the client is expecting. This exchange ostensibly authenticates C to the application server; however, because the service ticket names I, this server would believe that he is interacting with I, notC. Attackerimpersonatesservers. Alternatively,theattackermayinterceptC\u2019srequestsintheTGandCSexchanges and impersonate the involved servers rather than forwarding altered messages to them; the message flow for this version of the attack is shown in Fig. 7. In the TG exchange, I will ignore the TGT and only decrypt the portion of the request encrypted underAK (which he learned during the initial exchange). The attacker will then generate a bogus service ticketX ST , which the client expects to be opaque, and a fresh keySK encrypted (along with other datan 3 ,t T ,S) underAK, and send these toC in what appears to be a properly formatted reply from the TGS. In the CS exchange the attacker may again intercept the client\u2019s request; in this case, no new keys need to be generated, and the attacker only needs to return the client\u2019s timestamp encrypted underSK\u2014which I himself generated in the previous exchange\u2014for C to believe that she has completed this exchange with the application serverS. Note that the attacker may take the first approach\u2014mediating the exchange betweenCand 410 I. Cervesato et al. / Information and Computation 206 (2008) 402\u2013424 Fig. 7. Message flow in the man-in-the-middle attack on PKINIT-26, after the messages in Fig. 5, when the attacker impersonates the TGS and end server; hereTGT ={AK, I,t K } k T whileX ST is a garbage message. a TGS\u2014in the TG exchange and then the second\u2014impersonating the application server\u2014in the CS exchange. The reverse is not possible because I cannot forge a valid ST forS when impersonatingT. Regardless of which approach the attacker uses to propagate the attack throughout the protocol run, C finishes the CS exchange believing that she has interacted with a serverS and thatT has generated a fresh key SK known only toC andS. Instead, I knowsSK in addition to, or instead of,S (depending on how I propagated the attack). Thus I may learn any data thatC attempts to send toS; depending on the type of server involved, such data could be quite sensitive. Note that this attack does not allow I to impersonate C to a TGS or an application server because all involved tickets name I; Section 6.4 discusses a related authentication property. This also means that ifC is in communication with an actual server (T orS), that server will view the client as I, notC. 4. Preventing the attack The attack outlined in the previous section was possible because the two messages constituting the then- current version of PKINIT were insufficiently bound to each other. More precisely, the attack shows that, although a client can link a received response to a previous request (thanks to the nonces n 1 and n 2 , and to the timestamp t C ), she cannot be sure that the KAS generated the key AK and the ticket-granting-ticket TGT appearing in this response for her. Indeed, the only evidence of the principal for whom the KAS generated these credentials appears inside the TGT, which is opaque to her. This suggests one approach to making PKINIT immune to this attack, namely to require the KAS to include the identity of this principal in a component of the response that is integrity-protected and that the client can verify. An obvious mechanism is the submessage signed by the KAS in the reply. Following a methodology we successfully applied in previous work on Kerberos [7,9], we have constructed a formal model of both PKINIT-26 and various possible fixes to this protocol (including the one adopted in PKINIT-27). Details can be found in Section 6. Property 4.1 informally states that PKINIT-27 and subsequent versions satisfy a security property that we see violated in PKINIT-26, demonstrating that this fix does indeed defend against our attack. Property 4.1. In PKINIT-27 (and subsequent versions), whenever a client C processes an AS reply containing server-generated public-key credentials, the KAS previously produced such credentials forC. This property informally expresses the contents of Corollary 6.4, which we prove in Section 6. As we worked on our formal analysis, we solicited feedback from the IETF Kerberos Working Group, and in particular the authors of the PKINIT specifications, about possible fixes we were considering. We also analyzed I. Cervesato et al. / Information and Computation 206 (2008) 402\u2013424 411 Fig. 8. Abstract fix of PKINIT. Fig. 9. Fix of PKINIT adopted in version 27. the fix, proposed by the Working Group, that was included in PKINIT-27 and subsequent revisions of this specification [25]. 4.1. Abstract fix Having traced the origin of the discovered attack to the fact that the client cannot verify that the received credentials (the TGT and the keyAK) were generated for her, the problem can be fixed by having the KAS include C\u2019s name in the reply in such a way that it cannot be modified en route and thatC can check it. Following well- established recommendations [40], we initially proposed a simple and minimally intrusive approach to doing so: includingC\u2019s name in the portion of the reply signed by the KAS (in PKINIT-26, this is [k,n 2 ] sk K ). We then generalized it by observing that the KAS can sign k and any message fragment F(C,n i ) that is suitably built from C\u2019s name and at least one of the nonces n 1 and n 2 from C\u2019s request for credentials. With this abstract fix in place, the PKINIT exchange in public-key encryption mode is depicted in Fig. 8, where we have used a box to highlight the modification with respect to PKINIT-26. Here F represents any construction that injectively involves C and either n 1 or n 2 \u2014i.e., F(C,n i ) = F(C prime ,n prime i ) implies C = C prime and n i = n prime i \u2014and is verifiable by the client. Integrity protection is guaranteed by the fact that it appears inside a component signed by the KAS, and therefore is non-malleable by the attacker (assuming that the KAS\u2019s signature keys are secure). Intuitively, this defends against the attack since the clientC can now verify that the KAS generated the received credentials for her and not for another principal (such as I in our attack). Indeed, an honest KAS will produce the signature ([k,F(C,n i )] sk K ) only in response to a request from C. The presence of the nonces n 1 or n 2 uniquely identifies which of the (possibly several) requests fromCto which this reply corresponds. Note that the fact that we do not needF to mention bothn 1 andn 2 entails that the noncen 2 is superfluous as far as authentication is concerned. We will formally prove that this variant defends against the attack in Section 6. A simple instance of this general schema consists in taking F(C,n i ) to be (C,n 2 ), yielding the signed data [k,C,n 2 ] sk K , which corresponds to simply includingC\u2019s name within the signed portion of the PKINIT-26 reply. This version is very similar to the initial target of our formal verification. We showed that indeed it defeats the reported attack and satisfied the formal authentication property violated in PKINIT-26. Only later did we generalize the proof to refer to the abstract construction F. Its correctness will follow as a simple corollary of the validity of our general schema, as we will show in Section 6. 4.2. Solution adopted in PKINIT-27 When we discussed our initial fix with the authors of the PKINIT document, we received the request to apply our methodology to verify a different solution: rather than simply includingC\u2019s name in the signed portion of the reply, replace the nonce n 2 there with a keyed hash (\u201cchecksum\u201d in Kerberos terminology) taken over the 412 I. Cervesato et al. / Information and Computation 206 (2008) 402\u2013424 client\u2019s entire request. We did so and showed that this approach also defeats our attack. It is on the basis of this finding that we distilled the general fix discussed above, of which both solutions are instances. The IETF Kerberos Working Group later decided to include the checksum-based approach in PKINIT-27 and its subsequent revisions [25]. The message flow of this version of PKINIT is displayed in Fig. 9. Here, ck is a checksum of the client\u2019s request keyed with the key k, i.e., ck has the form H k (Cert C , [t C ,n 2 ] sk C ,C,T,n 1 ) where H is a preimage-resistant MAC function. This means that it is computationally infeasible for the at- tacker to find a message whose checksum matches that of a given message. Following the specifications in [41], which discusses cryptographic algorithms for use in the Kerberos protocol suite, current candidates for H include hmac-sha1-96-aes128. New strong keyed checksums can be used for ck as they are devel- oped. 5. Formalizing PKINIT in MSR We have formalized PKINIT in the language MSR [9,31,32] and used this specification to verify the cor- rectness of the proposed fixes. MSR is a flexible framework for specifying complex cryptographic protocols, possibly structured as a collection of coordinated subprotocols. It uses strongly typed multiset rewriting rules over first-order atomic formulas to express protocol actions and relies on a form of existential quantification to symbolically model the generation of fresh data (e.g., nonces or short-term keys). 5.1. Terms and types MSR represents network messages and their components as first-order terms. Thus the TGT {AK,C,t K } k T sent from K to C is modeled as the term obtained by applying the binary encryption symbol {_} _ to the constant k T and the subterm (AK,C,t K ). This subterm is built using atomic terms and two applications of the binary concatenation symbol (\u201c_, _\u201d). For simplicity, we retain the semi-formal message syntax used ear- lier. Terms are classified by types, which describe their intended meaning and restrict the set of terms that can be legally constructed. For example, {_} _ accepts a key (type key) and a message (type msg), produc- ing a term of type msg; using a nonce as the key yields an ill-formed term. Nonces, principal names, etc., often appear within messages; MSR uses the subsort relation to facilitate this. For example, defining nonce to be a subsort of msg (written nonce<: msg) allows nonces to be treated as messages. Both term con- structors and types are definable. This allows us to formalize the specialized principals of Kerberos 5 as subsorts of the generic principal type: we introduce types client, KAS, TGS and server, with the obvious meanings. MSR supports more structured type definitions [31]. Dependent types allow capturing the binding between a key and the principals for whom it was created. For example, the fact that a short-term key k is intended to be shared between a particular clientC and serverS is expressed by declaring it to be of type shK CS. Because k is a key, shK CSis a subsort of key (for all C and S), and since k is short term this type is also a subsort of msg as k needs to be transmitted in a message. We similarly model the long-term keys that a principal A shares with the KAS as objects of type dbK A, which is again a subsort of key but not of msg; these keys are not intended to be sent over the network, and this typing prohibits this. Dependent types give us elegant means to describe the public-key machinery. If (pk,sk) is the public/secret key pair of principal A, we simply declare pkof type pubK Aandsk of type secK pk. Secret keys, like the long-term keys, are not intended to be sent over the messages; thus the type secKpkis a subsort of key but not of msg. Although we do not explicitly include public keys in messages here, pubKAis a subsort of msg. The constructors for encryption and digital signature are written {{m}} pk and [m] sk , respectively, as in the text so far. Other types used in the formalization of PKINIT include time for timestamps, CertList for lists of digital certificates, and someSecK as an auxiliary type for working with digital signatures. The use of someSecK allows us, e.g., to model a signed message without declaring the public key or its owner that correspond to the signing key; in order to verify the signature we use the predicateVerifySigtogether with a list of certificates (as in Fig. 10) instead of a specific public key. We also use the constructor H k (m) to model the checksum (keyed hash) of messagemkeyed with symmetric keyk. I. Cervesato et al. / Information and Computation 206 (2008) 402\u2013424 413 Fig. 10. KAS\u2019s role in the abstract fix version of the PKINIT AS exchange. 5.2. States, rules, and the formalization of PKINIT The state of a protocol execution is determined by the network messages in transit, the local knowledge of each principal, and other similar data. MSR formalizes individual bits of information in a state by means of facts consisting of predicate name and one or more terms. For example, the network fact N({AK,C,t K } k T ) indicates that the term {AK,C,t K } k T , a TGT, is present on the network, andI({AK,C,t K } k T )that it is known by the attacker. A protocol consists of actions that transform the state. In MSR, this is modeled by the notion of rule:a description of the facts that an action removes from the current state and the facts it replaces them with to produce the next state. For example, Fig. 10 describes the actions of the KAS in the abstract fix of PKINIT (see Section 4) whereF(C,n i )stands for a construction that containsC and eithern 1 orn 2 (or both). Ignoring for the moment the leading \u2200K : KAS and the outermost brackets leaves us with a single MSR rule\u2014labeledDC3 2.1 above the arrow\u2014that we will use to illustrate characteristics of MSR rules in general. Rules are parametric, as evidenced by the leading string of typed universal quantifiers: actual values need to be supplied before applying the rule. The middle portion (\u00b7\u00b7\u00b7equal1\u21d2\u00b7\u00b7\u00b7) describes the transformation performed by the rule: it replaces states containing a fact of the form N(Cert C , [t C ,n 2 ] skC ,C,T,n 1 )with states that contain the fact on its right-hand side but which are otherwise identical. The existential marker \u201c\u2203AK : shK CT\u201d requires AK to be replaced with a newly generated symbol of type shK CT, and similarly for \u201c\u2203k : shK CK\u201d; this is how freshness requirements are modeled in MSR. The last line, starting with the keyword IF, further constrains the applicability of the rule by requiring that certain predicates be present (differently from the left-hand side, they are not removed as a result of applying the rule). Here, we use the predicates VerifySig to verify that a digital signature is valid given a list of credentials (VerifySig(s;m;P,Certs) holds if s is the signature, relative to certificatesCerts, by principalP over the messagem). Additionally, we useValid K to capture the local policy ofK in issuing tickets, andClock K to model the local clock ofK. While the entities following \u2018IF\u2019 are logically facts, in practice they are often handled procedurally, outside of MSR. Rule DC3 2.1 completely describes the behavior of the KAS; in general, multiple rules may be needed, as when modeling the actions of the client in the AS exchange. Coordinated rules describing the behavior of a principal are collected in a role. A role is just a sequence of rules, parameterized by the principal executing them (their owner)\u2014the \u201c\u2200K : KAS\u201d above the brackets in Fig. 10. The two-rule role describing the client\u2019s actions of the abstract fix version of PKINIT is displayed in Fig. 11. Formalizations of the TG and CS exchanges can be found in Appendix 7, with detailed explanations in [7,9,42]. 5.3. Execution semantics Going into more detail, the execution semantics of MSR operates by transforming not states (as introduced in the previous section) but configurations of the form \u3008S\u3009 R Sigma1 , where S is a state, the signature Sigma1 contains the symbols being used (with their type), and the active role setR = (rho a 1 1 ,...,SUB a n n )records the remaining actions of the currently present roles (SUB i ) together with the principals executing them (a i ). 414 I. Cervesato et al. / Information and Computation 206 (2008) 402\u2013424 Fig. 11. Client\u2019s role in the abstract fix version of the PKINIT AS exchange. Basic execution steps are expressed by judgments of the form P trianglerightC \u2212\u2192 C prime where P is the protocol speci- fication, and C and C prime are consecutive configurations. These judgments are defined by the following two rules (which are somewhat simplified from [43]): (P,SUB)triangleright\u3008S\u3009 R Sigma1 \u2212\u2192 \u3008S\u3009 R,SUB a Sigma1 inst P triangleright\u3008S, [DC2]lhs\u3009 R,((lhs\u21d2\u2203vectorx.rhs),SUB) a Sigma1 \u2212\u2192 \u3008S, [DC2, vectorc/vectorx]rhs\u3009 R,SUB a Sigma1,vectorc rw The rule inst prepares a role for execution by inserting it in the active role set: it associates the role with the principal a that will be executing it. The same role can be loaded arbitrarily many times by any principal (subject to some typing limitations), which provides support for the concurrent execution of multiple sessions and therefore also for multi-session attacks. The inference rw describes the application of a state transforming rule r = lhs \u21d2 rhs introduced in the previous section: if an instance [DC2]lhs of its left-hand side appears in the state, it is replaced by the corresponding instantiation of the right-hand side ofrafter instantiating the existential variables vectorx with new constants vectorc. The ruler is then removed from the active role set of the configuration, and vectorc is added to the signature. In order to present rule application in a compact yet precise way, the notion of an abstract execution step is used which denotes a quadrupleC r,DC3 \u2212\u2192C prime . Here,C andC prime are consecutive configurations,r identifies the rule from P being executed, andDC3stands for the overall substitution [DC2, vectorc/vectorx] above. We say thatr is applicable inC if there exist a substitutionDC3and a configurationC prime such thatC r,DC3 \u2212\u2192C prime is defined. A trace T is then a sequence of the form C 0 r 1 ,DC3 1 \u2212\u2192 C 1 r 2 ,DC3 2 \u2212\u2192 \u00b7\u00b7\u00b7 r n ,DC3 n \u2212\u2192 C n+1 where C 0 =\u3008S 0 \u3009 R 0 Sigma1 0 is called the initial configuration of T . In the context of Kerberos, the state component S 0 of the initial configuration contains only the predicates used in constraints (e.g., VerifySig in Fig. 11), and the intruder\u2019s knowledge (see next section); in particular, no network message or memory predicate is contained in S 0 . The initial signatureSigma1 0 withinC 0 contains the names of all principals together with their types (client, server, KAS, etc.), and their keys, etc. The initial active role setR 0 withinC 0 is empty. Note that we only need to consider finite traces, because execution (in any networked computer system) proceeds by discrete steps and started at a specific moment in time. Likewise, a generic trace will contain only a finite, although a priori unbounded, number of applications of inference inst for the same roleSUB. I. Cervesato et al. / Information and Computation 206 (2008) 402\u2013424 415 5.4. Intruder model The intruder model in our analysis of public-key Kerberos is a variant of the classic Dolev\u2013Yao intruder model [37,44]. The attacker in this model can traditionally intercept and originate network traffic, encrypt and decrypt captured messages as long as he knows the correct key, concatenate and split messages at will, generate certain types of messages (e.g., keys and nonces) but not others (e.g., principals), and access public data such as principal names. This set of intruder capabilities is given a precise specification in MSR. For this purpose, the knowledge of the intruder is modeled as a collection of facts I(m) (\u201cthe intruder knows message m\u201d) distributed in the state. The intruder himself is represented as the distinguished principal I by means of the declaration I : principal. Each capability is expressed by means of a one-rule role that can be executed only by I. For example, the specifications of network message interception, message splitting and nonce generation have the following form: I bracketleftBigg \u2200m : msg N(m) INT equal1\u21d2 I(m) bracketrightBigg I bracketleftBigg \u2200m 1 ,m 2 : msg I(m 1 ), I(m 2 ) CPM equal1\u21d2 I(m 1 ,m 2 ) bracketrightBigg I bracketleftBigg \u00b7 NG equal1\u21d2 \u2203n : nonce I(n) bracketrightBigg NoticethattheserolesidentifyIastheirowner(abovetheleftbrace)ratherthanagenericprincipal(introduced by a universal quantifier in the previous section). Because public-key Kerberos relies on more than shared keys, we extend our earlier intruder formalization with the following rules for public-key encryption and decryption. These allow the intruder to learn any public- key of any principal P, or to learn any of his own secret keys (but not those of other principals), and then to encrypt and decrypt if the proper keys are known. I bracketleftBigg \u2200P : principal \u2200pk: pubK P . PK prime equal1\u21d2 I(pk) bracketrightBigg I bracketleftBigg \u2200pk: pubK I \u2200sk : secKsk . SK prime equal1\u21d2 I(sk) bracketrightBigg I \u23a1 \u23a3 \u2200P : principal \u2200pk: pubK P \u2200m : msg I(m),I(pk) PEC prime equal1\u21d2 I({{m}} pk ) \u23a4 \u23a6 I \u23a1 \u23a2 \u23a2 \u23a2 \u23a2 \u23a2 \u23a3 \u2200P : principal \u2200pk: pubK P \u2200sk : secK pk \u2200m : msg I({{m}} pk ),I(sk) PDEC prime equal1\u21d2 I(m) \u23a4 \u23a5 \u23a5 \u23a5 \u23a5 \u23a5 \u23a6 Signing is handled similarly as shown in rule SIG below. Rather than having the intruder verify signatures, an activity an attacker will rarely bother with (although it could easily be modeled in MSR), rule PEEK allows him to extract a message from a signature. It should be noted that this specification deemphasizes the PKI infrastructure on which PKINIT relies as it confines the use of certificates to the predicate VerifySig. A more explicit treatment is unnecessary in this case. I \u23a1 \u23a3 \u2200P : principal \u2200pk: pubK P \u2200sk : secK pk \u2200m : msg I(m), I(sk) SIG equal1\u21d2 I([m] sk ) \u23a4 \u23a6 I bracketleftBigg \u2200sk : someSecK \u2200m : msg I([m] sk ) PEEK equal1\u21d2 I(m) bracketrightBigg Because secret keys are typed like long-term keys, we add specific rules allowing duplication and deletion in memory of known secret keys (paralleling the rules DPD and DLD from [42]). These are straightforward, and we omit the specific rules here. 416 I. Cervesato et al. / Information and Computation 206 (2008) 402\u2013424 Fig. 12. The definition ofSUB k (m;m 0 ), thek-rank ofmrelative tom 0 . The remaining rules implementing the other traditional Dolev\u2013Yao intruder capabilities are defined similarly. A complete list for basic Kerberos can be found in [42]. 6. Formal analysis of PKINIT Our formal proofs rely on a double induction aimed at separating the confidentiality and authentication aspects of the analysis of Kerberos 5. Confidentiality and authentication can interact in complex ways, requiring both types of functions in a single proof. (This is not so much the case in the AS exchange, because the security of this first exchange does not rely on properties of earlier rounds, but it is seen clearly in the later rounds as illustrated in [7,42].) Our proofs are supported by two classes of functions, rank and corank, whose definitions we recall in Section 6.1. We prove the correctness of the fixed protocol in Section 6.2, discuss other authentication properties in Sections 6.3 and 6.4, and then state and prove auxiliary lemmas in Section 6.5. 6.1. Rank and corank We start by reviewing the definition of rank and corank functions as originally given in [7,8,42] and extended to include the cryptographic primitives that PKINIT adds to basic Kerberos. We start by defining these classes of functions inductively on terms and then extend the definitions to facts. Rank. Rank captures the amount of work done using a specific key to encrypt a specified message. For a cryptographic keyk and a fixed messagem 0 , we define the k-rank of a message m relative tom 0 as shown in Fig. 12. If m is an atomic term, then no work has been done using k, and we set the rank to 0. If m is exactly {m 0 } k , {{m 0 }} k ,or[m 0 ] k , then we set the rank to 1. Encrypting or signing a message m of positive k-rank will increase the rank by 1 in case one uses the keyk, whereas using a keyk prime /= k will have no effect on thek-rank ofmrelative to m 0 . The rank of the concatenation of two messages is set to be the larger of the ranks of the constituent messages. The extension of the rank function to facts is straightforward. For a key k and for m 0 of type msg, and termst,t i , andP any predicate in the protocol signature, we define thek-rank of a factP(t 1 ,...,t j )relative tom 0 I. Cervesato et al. / Information and Computation 206 (2008) 402\u2013424 417 Fig. 13. Definition of \u02c6SUB E (m;m 0 ), theE-corank ofmrelative tom 0 . by SUB k (P(t 1 ,...,t j );m 0 ) = max 1lessorequalslantilessorequalslantj SUB k (t i ;m 0 ). E.g., for network facts the k-rank relative to m 0 is SUB k (N(m);m 0 ) = SUB k (m;m 0 ). Our rank functions are most closely connected to data origin authentication, although they are used in conjunction with corank functions in many proofs [8]. The relationship between rank and authentication follows Theorem 6.1, which was outlined in [8]. Theorem 6.1. IfSUB k (F;m 0 ) = 0 for every factF in the initial state of a generic trace T and if no intruder rule can increase thek-rank relative tom 0 then the existence of a factF withSUB k (F;m 0 )>0 in some non-initial state of T implies that some honest principal fired a rule which produced a fact build up from {m 0 } k . As in [42] (although stated there without some of the primitives needed to model PKINIT), if an intruder rule increasesk-rank relative tom 0 , then the left-hand side of that rule containsI(k). Thus, if we show thatI(k)never appears in a trace, we may invoke Theorem 6.1 to help prove authentication. Corank. Corank captures the minimum effort needed, using keys from a specified set, to extract a (possibly) secret message from a given term. For a setE of keys, none of which is a public key, and a fixed atomic message m 0 , we define the E-corank of message m relative tom 0 as shown in Fig. 13.Ifmis atomic andm = m 0 , then no work using keys fromE is needed to obtainm 0 , and we set the corank to 0. Ifmis atomic andm/= m 0 , then no amount of such work can extractm 0 . The number of decryptions needed to obtainm 0 from {m} k using keys from E is 1 more than or the same as the number of decryptions needed to obtainm 0 fromm, depending on whether k (if the encryption is symmetric) or some k prime : secKk (if the encryption is asymmetric) is an element of E or not. The corank of the concatenation of two messages is equal to the smaller of the coranks of the constituent messages. The extension of the corank function to facts is slightly different from that of the rank function. The definition of corank of a fact depends on the predicate P in which it occurs. For example, for the network predicate N() we define \u02c6SUB E (N(m);m 0 ) =\u02c6SUB E (m;m 0 ), while for the client\u2019s memory predicate Auth C (used in the rules in Figs. 11, A.1, and A.3) we define \u02c6SUB E (Auth C (t 1 ,t 2 ,t 3 );m 0 ) =\u02c6SUB E (t 1 ;m 0 ). This follows our informal rule [7,8] that the corank of a fact depends only on the arguments of the predicate that might be put onto the network. Our corank functions are closely connected to confidentiality, which we typically prove by invoking the following theorem from [8]. Theorem 6.2. If \u02c6SUB E (F;m 0 )>0 for every fact in the initial state of a generic trace T , if no intruder can decrease the E-corank relative tom 0 , and if no honest principal creates a factF with \u02c6SUB E (F;m 0 ) = 0, thenm 0 is secret throughout T. 6.2. Correctness of the fix We now present the theorem that establishes the correctness of the abstract fix to PKINIT introduced in Section 4.1. This, in turn, implies the correctness of PKINIT-27 and subsequent versions of PKINIT (including the final specification)\u2014i.e., that Property 4.1 holds\u2014because these use a special case of the abstract fix. In 418 I. Cervesato et al. / Information and Computation 206 (2008) 402\u2013424 the following we will assume that F(C,n i ) = F(C prime ,n prime i ) implies C = C prime and n i = n prime i , for any C,C prime : client and n i ,n prime i : nonce (fori = 1, 2). Theorem 6.3. If (1) the fact N({{Cert K , [k,F(C,n i )] sk K }} pk C ,C,X, {AK,n 1 ,t K ,T} k ) appears in a trace, for some C : client, K : KAS, k : shK CK, sk K : someSecK, X : msg, Cert K : CertList, pk C : pubKC, T : TGS, AK : shK CT, n i ,n 1 : nonce, andt K : time; (2) the factVerifySig([k,F(C,n i )] sk K ;(k,F(C,n i ));K,Cert K )holds; and (3) for every pk K : pubKK and sk : secKpk K , the fact I(sk) does not appear in the trace and no fact in the initial state of the trace contained a fact of positivesk-rank relative to(k,F(C,n i )), then the KAS K fired rule DC3 2.1 , consuming the fact N(Cert C , [t C ,n 2 ] sk C ,C,T,n 1 ) and creating the fact N({{Cert K , [k,F(C,n i )] sk K }} pk C ,C, {AK,C,t K } k T , {AK,n 1 ,t K ,T} k ),forsomeCert C : CertList,sk C : secK pk C ,n 2 : nonce, t C ,t K : time,k T : dbK T. Proof.BecauseVerifySig([k,F(C,n i )] sk K ;(k,F(C,n i ));K,Cert K )holds,byLemma6.10thereissomesk : secK pk K suchthatSUB sk ([k,F(C,n i )] sk K ;(k,F(C,n i )))> 0(wherepk K : pubKK).ThusthefactN({{Cert C , [k,F(C,n i )] sk K }} pk C , C,X, {AK,n 1 ,t K ,T} k )has positivesk-rank relative to(k,F(C,n i )); by hypothesis, no such fact existed in the initial state of the trace, so some rule firing during the trace must have increased this rank. By hypothesis, I(sk) does not appear in the initial state of the trace, so by Lemma 6.14 I(sk) does not ap- pear in any state of the trace. By Lemma 6.11, this means that no rule fired by the intruder can increase sk- rank relative to (k,F(C,n i )); thus, by Theorem 6.1, at some point in this trace an honest principal must have fired a rule that increased this rank. By inspection of the principal rules, the only one that can do this is rule DC3 2.1 ; in order for this rule to do so, it must be fired by the KAS K who owns sk, consume a network fact N(Cert C prime, [t,n prime 2 ] sk C prime ,C prime ,T prime ,n prime 1 ) for some t : time, n prime 2 ,n prime 1 : nonce, Cert C prime : CertList, C prime : client, and T prime : TGS, and produce the fact N({{Cert K , [k,F(C prime ,n prime i )] sk }} pk C prime ,C prime , {AK prime ,C prime ,t prime K } k T prime , {AK prime ,n prime 1 ,t prime K ,T prime } k )for someCert K : CertList, sk : someSecK,pk C prime : pubKC prime ,AK prime : shK C prime T prime ,t prime K : time,k T prime : dbK T prime ,n prime 1 : nonce, andF(C prime ,n prime i ) = F(C,n i ).By assumption,(C prime ,n prime i ) = (C,n i ), which implies that the request thatK processed must match the request described in the hypotheses. square The following corollary specializes the result in Theorem 6.3 to the particular fix used in PKINIT-27 and to the client\u2019s receipt of the network message described in the hypotheses of this theorem. It is the formal statement of Property 4.1, which says that ifC processes a reply message (containing the signed checksum of a request that C previously sent), then some KASK must have sent a reply message intended forC. Corollary 6.4. If (1) SomeC : client fires ruleDC3 1.2 , consuming the fact N({{Cert K , [k,ck] sk K }} pk C ,C,X, {AK,n 1 ,t K ,T} k )and produc- ing the factAuth C (X,T,AK)for some K : KAS, k : shK CK, sk K : someSecK, ck,X : msg, Cert K : CertList, pk C : pubKC, T : TGS, AK : shK CT,n 1 : nonce,t K : time, and (2)ck= H k (Cert C , [t C ,n 2 ] sk C ,C,T,n 1 ), for somet C : time,n 2 : nonce,Cert C : CertList,sk C : SecK pk C , and (3) for everypk K : pubKK andsk : secKpk K , the factI(sk)does not appear in the trace and no fact in the initial state of the trace contained a fact of positivesk-rank relative to(k,ck), then the KAS K fired rule DC3 2.1 , consuming the fact N(Cert C , [t C ,n 2 ] sk C ,C,T,n 1 ) and creating the fact N({{Cert K , [k,ck] sk K }} pk C ,C, {AK,C,t K } k T , {AK,n 1 ,t K ,T} k ), for somek T : dbK T,t K : time. I. Cervesato et al. / Information and Computation 206 (2008) 402\u2013424 419 Proof. This follows by letting F(C,n i ) = ck = H k (Cert C , [t C ,n 2 ] sk C ,C,T,n 1 ) in Theorem 6.3; this construction satisfies the assumptions onF(C,n i )for bothi = 1 andi = 2.C\u2019s rule firing implies that the first two hypotheses of the theorem hold; the third hypothesis of the corollary specializes the third hypothesis of the theorem to the case ofck = F(C,n i ), which implies the conclusion for somen prime 1 ,n prime 2 : nonce andCert prime C : CertList.C\u2019s firing of rule DC3 1.2 (when specialized to the checksum) implies that then prime 1 = n 1 ,n prime 2 = n 2 , andCert prime C = Cert C . square As a further remark, if in the abstract fix of PKINIT from Section 4.1 one chooses F(C,n i ) = F(C,n 1 ), the proof of Theorem 6.3 shows that authentication of the KAS to the client still holds. In fact, the KAS does not return any information containingn 2 . This means that the following holds. Property 6.5. The signed nonce n 2 in the client\u2019s AS request is superfluous for the purpose of authentication in PKINIT. This property does not imply that n 2 can simply be omitted from the first message of PKINIT in general, as some signed session identifiers is necessary to correctly support authentication as in Property 6.6 below. Rather, it suggests that it could be simplified by replacing every occurrence ofn 2 withn 1 . 6.3. Authentication ofC toK While our primary focus here is on the authentication ofK toC, becauseC signs a nonce in her request we may also prove authentication ofC toK; note that this holds in both the broken and fixed versions of PKINIT, as the fix does not affectC\u2019s request or our reasoning about it. Informally, we state this as the following property. Property 6.6. If a KAS processes a PKINIT request from a clientC, then previouslyC sent a PKINIT request that contained the signed data in the message received and processed by the KAS. Formally, we state this property as the following theorem. Theorem 6.7. If (1) Some K : KAS fires rule DC3 2.1 , consuming the fact N(Cert C , [t C ,n 2 ] sk ,C,T,n 1 ) for some Cert C : CertList, t C : time,n 1 ,n 2 : nonce,sk : someSecK,C : client, andT : TGS; and (2) for everypk: pubKC andsk : secKpk, the factI(sk)does not appear in the trace and no fact in the initial state of the trace contained a fact of positivesk-rank relative to(t C ,n 2 ), then atsomepointearlierinthetrace,theclientCfiredruleDC3 1.1 ,generatingthefactN(t C ,n 2 ,Cert prime C , [t C ,n 2 ] sk C ,C,T prime ,n prime 1 ) for someCert prime C : CertList,T prime : TGS, andn prime 1 : nonce. Proof.Having assumed thatKfired ruleDC3 2.1 , the factVerifySig([t C ,n 2 ] sk ;(t C ,n 2 );C,Cert C )must hold. By Lemma 6.10, the fact consumed by this rule firing has positive sk-rank relative to (t C ,n 2 ). By hypothesis, no such fact appeared in the initial state of the trace, so some rule that was fired during the trace increased this rank. Also by hypothesis, I(sk) cannot appear in the trace, so by Lemma 6.11, the intruder cannot increase this rank. By inspection of the principal rules, the only rule that can increase this rank is ruleDC3 1.1 when fired byC to create the fact N(t C ,n 2 ,Cert prime C , [t C ,n 2 ] sk C ,C,T prime ,n prime 1 )for someCert prime C : CertList,T prime : TGS, andn prime 1 : nonce. square 6.4. Authentication in the pre-fix protocol Our attack in Section 3 showed that an intruder could impersonate a KAS to a client. This means that KAS-to-client authentication does not hold when PKINIT-26 is used, in the sense that a client might receive a reply containing her name that appears to come from some KAS but without any KAS having ever sent such a message. However, PKINIT-26 does provide some authentication with respect to the later exchanges 420 I. Cervesato et al. / Information and Computation 206 (2008) 402\u2013424 as shown by Property 6.8 below, and this property still holds in the fixed protocol (PKINIT-27 and later ver- sions). Property 6.8. If TGST processes a valid request message naming a clientC, and the key used to encrypt the TGT which was contained in that request message was secret when the system started, then earlier the KASK generated a TGT namingC. Furthermore, ifC\u2019s private key was initially secret(so thatC is honest), thenC sent a request to T afterK sent a corresponding AS reply toC. As a consequence, we see that even if the intruder is carrying out the attack by letting C login to T and S as the intruder (so that the intruder can watch the traffic between them), some KAS must have created a TGT for the intruder, formalizing the requirement that the intruder be a legal user of the system. Furthermore, this shows that whileC might successfully \u2018request\u2019 a service ticket as the intruder in the attack scenario, it requires the participation of the intruder; in particular,C could not obtain a TGT that names an honest clientC prime if the relevant keys are secret. Theorem 6.9 formalizes this property; the relevant MSR roles for the TG and CS exchanges can be found in Appendix 7. Theorem 6.9. If (1)T:TGS fires rule DC3 4.1 consuming the fact N({AK,C,t K } k T , {AK,n 3 , t K , T} k , C,S) and creating the fact N(C, {SK,C} k S , {SK,n 3 ,S} AK )forsomeAK : shK CT,C : client,K : KAS,t K : time,k T : dbK T,n 3 : nonce, S : server, and (2) the fact I(k T ) does not appear in the trace and no fact in the initial state of the trace contained a fact of positivek T -rank relative to {AK,C,t K }, and (3) the factI(sk C )is not inferable in the initial state of the trace for everysk C : SecKpk C , then (i) the KAS K earlier fired rule DC3 2.1 , creating a fact N({Cert K , [k,H k (Cert C , [t C ,n 2 ] skC ,C,T,n 1 )] sk K } pk C , C, {AK,C,t K } k T , {AK,n 1 ,t K ,T} k )for someCert K ,Cert C : CertList,n 1 ,n 2 : nonce, and (ii)C fired rule DC3 3.1 , creating the fact N({AK,C,t K } k T , {AK,n 3 ,t K ,T} k ,C,S) in a state later in the trace than the state at whichK fired ruleDC3 2.1 producing the fact described above. Proof. We start with consideration of k T -rank relative to (AK,C,t K ). T\u2019s hypothesized rule firing consumed a fact for which this rank is positive, but by assumption this rank was 0 for every fact in the initial state of the trace. Thus some rule firing in the trace increased this rank. Because I(k T ) does not appear in the initial state of the trace, by Lemma 6.13 this fact never appears in the trace. Thus, by Lemma 6.11, the intruder cannot have increased k T -rank relative to (AK,C,t K ), so some honest principal must have done this. Inspection of the principal rules shows that ifk has type dbK T for some T : TGS, then the only honest principals that increase k-rank relative to any message are those of type KAS through the firing of rule DC3 2.1 . Thus some K : KAS fired rule DC3 2.1 , which must have consumed and produced the facts claimed. We now show that AK is secret by considering {k,k T }-corank relative to AK. K\u2019s firing of rule DC3 2.1 freshly generatesAK, so all previous states had infinite {k,k T }-corank relative toAK, and the state that results from this rule firing has {k,k T }-corank equal to 1 relative toAK. As noted above,I(k T )never appears in the trace; we must show that I(k) does not either. K\u2019s firing of rule DC3 2.1 also freshly generated k, so all previous states had infinite E-corank relative tok for every setE; furthermore, the resulting state has {sk C }-corank equal to 1 relative tok. BecauseI(sk C )was not inferable from the initial state of the trace, by Lemma 6.14 this fact never appears in the trace. Thus, by Lemma 6.12, the intruder cannot decrease {sk C }-corank relative tok. Inspection of the principal rules show that no honest principal will do this either; note that whileC decrypts the message containingk, she does not store this key, much less in a predicate that will allow it to be put onto the network. Therefore no state in the trace has {sk C }-corank equal to 0 relative tok,soI(k)never appears in the trace. I. Cervesato et al. / Information and Computation 206 (2008) 402\u2013424 421 Because neither I(k T ) nor I(k) ever appear in the trace, the intruder cannot decrease {k,k T }-corank relative to AK. By inspection, we see that the only principal rule which decreases this corank is rule DC3 2.1 when it is fired to freshly generate AK. As noted above, the resulting state must have {k,k T }-corank equal to 1 relative to AK; no principal rule will decrease this corank to 0. Thus no fact of {k,k T }-corank equal to 0 relative toAK, and in particular the factI(AK), appears in the trace. We may now show thatC fired ruleDC3 3.1 in the claimed fashion.T\u2019s hypothesized rule firing also consumed a fact ofAK-rank equal to 1 relative toC,t C . BecauseAK was freshly generated during the trace (as shown above) and I(AK) never appears in the trace, some honest principal must have fired a rule that increased AK-rank relative toC,t C . By inspection, we see that the only such principal rule is ruleDC3 3.1 , which must produce the fact N(X, {C,t C } AK ,C,S,n 3 ) for some X : msg, t C : time, S : server, and n 3 : nonce. Because this fact has positive AK-rank relative toC,t C andAK was freshly generated byK, we know thatC\u2019s firing of ruleDC3 3.1 occurred after K\u2019s firing of ruleDC3 2.1 . square 6.5. Lemmas Anumberoflemmasgivingconditionsunderwhichvariousranksandcorankscanbeincreasedanddecreased by rule firings can be found in [42]. However, we need to add to them as public-key operations where not considered in that work. Lemma 6.10. If VerifySig(s;m;P,Certs) holds, then for some pk: pubKP and sk : secK pk, the sk-rank of s relative tomis positive. Proof. Our assumptions aboutVerifySigimply thatsis a valid signature ofmunder one ofP\u2019s secret keys, i.e., for somepk: pubKP andsk : secK pk,s =[m] sk . Thusshas positivesk-rank relative tom. square The following lemmas were proved in [42] for the formalizations of basic Kerberos considered there. These property still holds here once we add asymmetric encryption and digital signatures. Lemma 6.11. If an intruder ruleRcan increasek-rank relative to a messagem 0 , then the left-hand side ofRcontains I(k). Proof. By inspection of the intruder rules. square Lemma 6.12. If m 0 is not a principal name, time, or key of one of the types dbK I, shK IA(for A : TGS or A : server),shK CIfor C : client, or pubKP for P : principal, then any intruder rule that decreases E-corank relative tom 0 either containsI(k)in its left hand side for somek \u2208 E or freshly generatesm 0 . Proof. By inspection of the intruder rules. square The following lemma is an analog of Lemma 6 in [42]; the additional intruder rules do not change it. Lemma 6.13. For any P : principal, P/= I, and k : dbK P, if I(k) does not appear in the initial state of the trace, thenI(k)does not appear in any state of the trace. Proof. By inspection of the intruder rules. Because dbK P is not a subtype of msg,ifP/= I thenI(k)appears on the right-hand side of a rule only if it also appears on the left-hand side. square The next lemma is analogous to the previous one, but it refers to secret keys for asymmetric encryption instead of the keys in the KAS\u2019s database. Lemma 6.14. For anyP : principal,pubk : pubKP,P/= I, andk : secKpubk, ifI(k)does not appear in the initial state of the trace, thenI(k)does not appear in any state of the trace. Proof. By inspection of the intruder rules. Because secKpubk is not a subtype of msg, for k : secKpubk, the only timeI(k)may appear on the right-hand side of an intruder rule but not on the left-hand side is in rule SK prime , in which caseP = I. square 422 I. Cervesato et al. / Information and Computation 206 (2008) 402\u2013424 7. Conclusions and future work In this paper, we describe our discovery of a man-in-the-middle attack against PKINIT [25], the public-key extension to the popular Kerberos 5 authentication protocol [1]. The attack was found on PKINIT-25, but applies to previous versions as well. We found this attack as part of an ongoing formal analysis of Kerberos, which has previously yielded proofs of security for the core Kerberos 5 protocol [7,8] and its use for cross-realm authentication [9]. We have used formal methods approaches to prove that, at an abstract level, several possible defenses against our attack restore security properties of Kerberos 5 that are violated in PKINIT (as shown by the attack); we also proved some security properties that do hold even for the vulnerable form of PKINIT. The fixes we analyzed include the one proposed by the IETF Kerberos Working Group, which included it in the specification of PKINIT starting with revision 27 [25]. Our attack was also addressed in a Microsoft security bulletin affecting several versions of Windows [4] and mentioned in a CERT advisory [26]. Asacontinuationofthisresearch,wehavecarriedoversomeoftheresultsexaminedheretothecomputational model by expressing PKINIT and other aspects of Kerberos in the cryptographic library model of Backes, Pfitzmann and Waidner (BPW model) [45]. The main outcome of this effort was that the fixes examined here were proved to be correct at the cryptographic level [21]. The computationally sound proofs in the BPW model were conducted symbolically by hand [21] and there appears to be a strong relation to the symbolic proof technique used in this work. Gaining a better understanding of how these two methods relate will be subject to future work. If a suitable connection to the BPW framework is discovered, it could contribute to the automation of proof in the cryptographic model [46], which will have the effect of speeding up the analysis work and, therefore, allowing us to tackle larger protocols. We have also started to mechanically verify security properties of PKINIT directly within the computational model [22] using Blanchet\u2019s CryptoVerif tool [23,24]. We are also in the process of extending our analysis to the Diffie\u2013Hellman mode of PKINIT: our preliminary observations suggest that it is immune from the attack described in this paper, but we do not yet have definite results on other types of threats. Appendix A. MSR roles for later exchanges Here we recall the MSR roles for the TG and CS exchanges. These are the same as for basic Kerberos because PKINIT only modifies the AS exchange. Fig. A.1 shows the client\u2019s role in the TG exchange. The memory predicate Auth C (X,T,AK)comes from the AS exchange (formalized in Fig. 11 above). Fig. A.1. The client\u2019s role in TG exchange. I. Cervesato et al. / Information and Computation 206 (2008) 402\u2013424 423 Fig. A.2. The TGS\u2019s role in the TG exchange. Fig. A.3. The client\u2019s role in the CS exchange. Fig. A.4. The server\u2019s role in the CS exchange. Fig. A.2 shows the TGS\u2019s role in the TG exchange. Figs. A.3 and A.4 show the client and server roles, respectively, for the CS exchange. References [1] C. Neuman, T. Yu, S. Hartman, K. Raeburn, The Kerberos Network Authentication Service (V5). Available from: <http://www.ietf.org/rfc/rfc4120> (July 2005). [2] M. Thomas, J. Vilhuber, Kerberized Internet Negotiation of Keys (KINK), Available from: <http://ietfreport.isoc.org/all-ids/draft- ietf-kink-kink-06.txt> (December 2003). [3] J. Kohl, C. Neuman, The Kerberos Network Authentication Service (V5). Available from: <http://www.ietf.org/rfc/rfc1510> (September 1993). [4] Microsoft, Security Bulletin MS05-042. Available from: <http://www.microsoft.com/technet/security/bulletin/MS05-042.mspx> (Au- gust 2005). [5] M. Strasser, A. Steffen, Kerberos PKINIT Implementation for Unix Clients, Tech. Rep., Zurich University of Applied Sciences Win- terthur (2002). [6] T. Yu, S. Hartman, K. Raeburn, The perils of unauthenticated encryption: Kerberos version 4, in: Proc. NDSS\u201904, 2004. [7] F. Butler, I. Cervesato, A.D. Jaggard, A. Scedrov, An analysis of some properties of Kerberos 5 using MSR, in: Proc. CSFW\u201902, 2002, pp. 175\u2013190. [8] F. Butler, I. Cervesato, A.D. Jaggard, A. Scedrov, C. Walstad, Formal Analysis of Kerberos 5, Theor. Comput. Sci. 367 (1\u20132) (2006) 57\u201387. [9] I. Cervesato, A.D. Jaggard, A. Scedrov, C. Walstad, Specifying Kerberos 5 cross-realm authentication, in: Proc. WITS\u201905, ACM Digital Lib., 2005, pp. 12\u201326. [10] M. Abadi, B. Blanchet, Analyzing security protocols with secrecy types and logic programs, J. ACM 52 (1) (2005) 102\u2013146. 424 I. Cervesato et al. / Information and Computation 206 (2008) 402\u2013424 [11] M. Anlauff, D. Pavlovic, R. Waldinger, S. Westfold, Proving authentication properties in the protocol derivation assistant, in: P. Degano, R. K\u00fcsters, L. Vigano (Eds.), Proc. FCS-ARSPA 2006, ACM, 2006, to appear URL <ftp://ftp.kestrel.edu/pub/papers/pavlovic/FCS- ARSPA06.pdf>. [12] B.Blanchet,Anefficientcryptographicprotocolverifierbasedonprologrules,in:14thIEEEComputerSecurityFoundationsWorkshop (CSFW-14), IEEE Computer Society, Cape Breton, Nova Scotia, Canada, 2001, pp.82\u201396. [13] B. Blanchet, From secrecy to authenticity in security protocols, in: M. Hermenegildo, G. Puebla (Eds.), 9th International Static Analysis Symposium (SAS\u201902), vol. 2477 of Lecture Notes on Computer Science, Springer Verlag, Madrid, Spain, 2002, pp. 342\u2013359. [14] S.F. Doghmi, J.D. Guttman, F.J. Thayer, Searching for shapes in cryptographic protocols, in: Proc. TACAS 2007, 2007. [15] L. Vigan\u00f2, Automated security protocol analysis with the AVISPA tool, Electr. Notes Theor. Comput. Sci. 155 (2006) 61\u201386. [16] A.Armando,D.A.Basin,Y.Boichut,Y.Chevalier,L.Compagna,J.Cu\u00e9llar,P.H.Drielsma,P.-C.H\u00e9am,O.Kouchnarenko,J.Mantovani, S. M\u00f6dersheim, D. von Oheimb, M. Rusinowitch, J. Santiago, M. Turuani, L. Vigan\u00f3, L. Vigneron, The AVISPA tool for the automated validation of internet security protocols and applications, in: K. Etessami, S.K. Rajamani (Eds.), CAV, Lect. Notes Comput. Sci., vol. 3576, Springer, 2005, pp. 281\u2013285. [17] C. Cremers, Scyther\u2014semantics and verification of security protocols, Ph.D. dissertation, Eindhoven University of Technology (2006). [18] R. Kemmerer, C. Meadows, J. Millen, Three systems for cryptographic protocol analysis, J. Cryptol. 7 (1994) 79\u2013130. [19] C. Meadows, Analysis of the internet key exchange protocol using the NRL protocol analyzer, in: Proc. IEEE Symp. Security Privacy, 1999, pp. 216\u2013231. [20] J.C. Mitchell, V. Shmatikov, U. Stern, Finite-state analysis of SSL 3.0, in: Proc. 7th USENIX Security Symp., 1998, pp. 201\u2013216. [21] M. Backes, I. Cervesato, A. D. Jaggard, A. Scedrov, J.-K. Tsay, Cryptographically sound security proofs for basic and public-key Kerberos, in: D. Gollmann, J. Meier, A. Sabelfeld (Eds.), Proc. ESORICS\u201906, Springer LNCS 4189, 2006, pp. 362\u2013383. [22] A.D. Jaggard, A. Scedrov, J.-K. Tsay, Computational sound mechanized proof of PKINIT for Kerberos, presented at FCC\u201907 (no proceedings) (2007). [23] B. Blanchet, A computationally sound mechanized prover for security protocols, in: IEEE Symposium on Security and Privacy, Oakland, CA, 2006, pp. 140\u2013154. [24] B. Blanchet, Computationally sound mechanized proofs of correspondence assertions, in: 20th IEEE Computer Security Foundations Symposium (CSF\u201907), IEEE, Venice, Italy, 2007, pp. 97\u2013111. [25] IETF, Public Key cryptography for initial authentication in Kerberos, RFC 4556, Preliminary versions available as a sequence of Internet Drafts at <http://tools.ietf.org/wg/krb-wg/draft-ietf-cat-kerberos-pk-init/> (1996\u20132006). [26] CERT, Vulnerability Note 477341, <http://www.kb.cert.org/vuls/id/477341> (2005). [27] I. Cervesato, A.D. Jaggard, A. Scedrov, J.-K. Tsay, C. Walstad, Breaking and fixing public-key Kerberos, in: Proceedings of ASIAN\u201906, 2006, pp. 164\u2013178. [28] J. De Clercq, M. Balladelli, Windows 2000 authentication. Available from: <http://www.windowsitlibrary.com/Content/617/06/6.html>, digital Press (2001). [29] Cable Television Laboratories, Inc., PacketCable Security Specification, technical document PKT-SP-SEC-I11-040730 (2004). [30] S. Goldwasser, S. Micali, R.L. Rivest, A digital signature scheme secure against adaptive chosen message attacks, SIAM J. Comput. 17 (1988) 281\u2013308. [31] I. Cervesato, Typed MSR: syntax and examples, in: Proc. MMM\u201901, Springer LNCS 2052, 2001, pp. 159\u2013177. [32] N.A. Durgin, P. Lincoln, J. Mitchell, A. Scedrov, Multiset rewriting and the complexity of bounded security protocols, J. Comp. Security 12 (2) (2004) 247\u2013311. [33] W. Diffie, P.C. van Oorschot, M.J. Wiener, Authentication and authenticated key exchanges, Designs Codes Cryptogr. 2 (2) (1992) 107\u2013125. [34] R. Canetti, H. Krawczyk, Security analysis of IKE\u2019s signature-based key-exchange protocol, in: Proc. CRYPTO\u201902, Springer LNCS 2442, 2002, pp. 143\u2013161. [35] D. Harkins, D. Carrel, The Internet key exchange (IKE). Available from: <http://www.ietf.org/rfc/rfc2409> (November 1998). [36] G. Lowe, Breaking and fixing the Needham\u2013Schroeder public-key protocol using FDR, in: Proc. TACAS\u201996, Springer LNCS 1055, 1996, pp. 147\u2013166. [37] R. Needham, M. Schroeder, Using encryption for authentication in large networks of computers, Comm. ACM 21 (12) (1978) 993\u2013999. [38] J. Clark, J. Jacob, On the security of recent protocols, Inform. Process. Lett. 56 (3) (1995) 151\u2013155. [39] T. Hwang, Y.-H. Chen, On the security of SPLICE/AS\u2014the authentication system in WIDE internet, Inform. Process. Lett. 53 (2) (1995) 91\u2013101. [40] M. Abadi, R. Needham, Prudent engineering practice for cryptographic protocols, IEEE Trans. Software Eng. 22 (1) (1996) 6\u201315. [41] K. Raeburn, Encryption and checksum specifications for Kerberos 5. Available from: <http://www.ietf.org/rfc/rfc3961.txt> (February 2005). [42] F. Butler, I. Cervesato, A.D. Jaggard, A. Scedrov, Confidentiality and authentication in Kerberos 5, Tech. Rep. MS-CIS-04-04, UPenn (2004). [43] I. Cervesato, A specification language for crypto-protocols based on multiset. Rewriting, dependent types and subsorting, in: G. Delzanno, S. Etalle, M. Gabbrielli (Eds.), Workshop on Specification, Analysis and Validation for Emerging Technologies\u2014SAVE\u201901, Paphos, Cyprus, 2001, pp. 1\u201322. [44] D. Dolev, A. Yao, On the security of public-key protocols, IEEE Trans. Inform. Theory 2 (29) (1983) 198\u2013208. [45] M. Backes, B. Pfitzmann, M. Waidner, A composable cryptographic library with nested operations, in: Proc. CCS\u201903, ACM, 2003, pp. 220\u2013230. [46] C. Sprenger, M. Backes, D. Basin, B. Pfitzmann, M. Waidner, Cryptographically sound theorem proving, in: Proc. CSFW \u201906, 2006, pp. 153\u2013166. YINCO 3526 S0890-5401(07)00123-X 10.1016/j.ic.2007.05.005 Elsevier Inc. \u2606 Cervesato was partially supported by the Qatar Foundation under grant number 930107, with early aspects of this work supported by ONR under grants N00014-99-1-0150 and N00014-01-1-0795. Jaggard was partially supported by NSF Grants DMS-0239996 and CNS-0429689 and by ONR Grant N00014-05-1-0818; this work was done while he was at Tulane University and, in part, while he was a Visiting Scholar in the Mathematics Department at the University of Pennsylvania. Scedrov, Tsay, and Walstad were partially supported by OSD/ONR CIP/SW URI \u201cSoftware Quality and Infrastructure Protection for Diffuse Computing\u201d through ONR Grant N00014-01-1-0795 and OSD/ONR CIP/SW URI \u201cTrustworthy Infrastructure, Mechanisms, and Experimentation for Diffuse Computing\u201d through ONR Grant N00014-04-1-0725. Additional support from NSF Grants CNS-0429689 and CNS-0524059. Breaking and fixing public-key Kerberos Iliano Cervesato a Aaron D. Jaggard b Andre Scedrov c Joe-Kai Tsay c \u204e jetsay@math.upenn.edu Christopher Walstad d a Carnegie Mellon University in Qatar, P.O. Box 42866, Doha, Qatar b DIMACS, Rutgers University, 96 Frelinghuysen Rd., Piscataway, NJ 08854 c University of Pennsylvania, Department of Mathematics, 209 S. 33rd St., Philadelphia, PA 19104, USA d University of Pennsylvania, School of Engineering and Applied Science, 220 S. 33rd St., Philadelphia, PA 19104, USA \u204e Corresponding author. Abstract We report on a man-in-the-middle attack on PKINIT, the public key extension of the widely deployed Kerberos 5 authentication protocol. This flaw allows an attacker to impersonate Kerberos administrative principals (KDC) and end-servers to a client, hence breaching the authentication guarantees of Kerberos. It also gives the attacker the keys that the KDC would normally generate to encrypt the service requests of this client, hence defeating confidentiality as well. The discovery of this attack caused the IETF to change the specification of PKINIT and Microsoft to release a security update for some Windows operating systems. We discovered this attack as part of an ongoing formal analysis of the Kerberos protocol suite, and we have formally verified several possible fixes to PKINIT\u2014including the one adopted by the IETF\u2014that prevent our attack as well as other authentication and secrecy properties of Kerberos with PKINIT. Keywords Computer security Authentication protocols Kerberos PKINIT Man-in-the-middle attack Protocol verification References [1] C. Neuman, T. Yu, S. Hartman, K. Raeburn, The Kerberos Network Authentication Service (V5). Available from: <http://www.ietf.org/rfc/rfc4120> (July 2005). [2] M. Thomas, J. Vilhuber, Kerberized Internet Negotiation of Keys (KINK). Available from: <http://ietfreport.isoc.org/all-ids/draft-ietf-kink-kink-06.txt> (December 2003). [3] J. Kohl, C. Neuman, The Kerberos Network Authentication Service (V5). Available from: <http://www.ietf.org/rfc/rfc1510> (September 1993). [4] Microsoft, Security Bulletin MS05-042. Available from: <http://www.microsoft.com/technet/security/bulletin/MS05-042.mspx> (August 2005). [5] M. Strasser, A. Steffen, Kerberos PKINIT Implementation for Unix Clients, Tech. Rep., Zurich University of Applied Sciences Winterthur (2002). [6] T. Yu, S. Hartman, K. Raeburn, The perils of unauthenticated encryption: Kerberos version 4, in: Proc. NDSS\u201904, 2004. [7] F. Butler, I. Cervesato, A.D. Jaggard, A. Scedrov, An analysis of some properties of Kerberos 5 using MSR, in: Proc. CSFW\u201902, 2002, pp. 175\u2013190. [8] F. Butler I. Cervesato A.D. Jaggard A. Scedrov C. Walstad Formal Analysis of Kerberos 5 Theor. Comput. Sci. 367 1\u20132 2006 57 87 [9] I. Cervesato, A.D. Jaggard, A. Scedrov, C. Walstad, Specifying Kerberos 5 cross-realm authentication, in: Proc. WITS\u201905, ACM Digital Lib., 2005, pp. 12\u201326. [10] M. Abadi B. Blanchet Analyzing security protocols with secrecy types and logic programs J. ACM 52 1 2005 102 146 [11] M. Anlauff, D. Pavlovic, R. Waldinger, S. Westfold, Proving authentication properties in the protocol derivation assistant, in: P. Degano, R. K\u00fcsters, L. Vigano (Eds.), Proc. FCS-ARSPA 2006, ACM, 2006, to appear URL: <ftp://ftp.kestrel.edu/pub/papers/pavlovic/FCS-ARSPA06.pdf>. [12] B. Blanchet, An efficient cryptographic protocol verifier based on prolog rules, in: 14th IEEE Computer Security Foundations Workshop (CSFW-14), IEEE Computer Society, Cape Breton, Nova Scotia, Canada, 2001, pp.82\u201396. [13] B. Blanchet, From secrecy to authenticity in security protocols, in: M. Hermenegildo, G. Puebla (Eds.), 9th International Static Analysis Symposium (SAS\u201902), vol. 2477 of Lecture Notes on Computer Science, Springer Verlag, Madrid, Spain, 2002, pp. 342\u2013359. [14] S.F. Doghmi, J.D. Guttman, F.J. Thayer, Searching for shapes in cryptographic protocols, in: Proc. TACAS 2007, 2007. [15] L. Vigan\u00f2 Automated security protocol analysis with the AVISPA tool Electr. Notes Theor. Comput. Sci. 155 2006 61 86 [16] A. Armando D.A. Basin Y. Boichut Y. Chevalier L. Compagna J. Cu\u00e9llar P.H. Drielsma P.-C. H\u00e9am O. Kouchnarenko J. Mantovani S. M\u00f6dersheim D. von Oheimb M. Rusinowitch J. Santiago M. Turuani L. Vigan\u00f3 L. Vigneron The AVISPA tool for the automated validation of internet security protocols and applications K. Etessami S.K. Rajamani CAV Lect. Notes Comput. Sci. vol. 3576 2005 Springer 281 285 [17] C. Cremers, Scyther\u2014semantics and verification of security protocols, Ph.D. dissertation, Eindhoven University of Technology (2006). [18] R. Kemmerer C. Meadows J. Millen Three systems for cryptographic protocol analysis J. Cryptol. 7 1994 79 130 [19] C. Meadows, Analysis of the internet key exchange protocol using the NRL protocol analyzer, in: Proc. IEEE Symp. Security Privacy, 1999, pp. 216\u2013231. [20] J.C. Mitchell, V. Shmatikov, U. Stern, Finite-state analysis of SSL 3.0, in: Proc. 7th USENIX Security Symp., 1998, pp. 201\u2013216. [21] M. Backes, I. Cervesato, A. D. Jaggard, A. Scedrov, J.-K. Tsay, Cryptographically sound security proofs for basic and public-key Kerberos, in: D. Gollmann, J. Meier, A. Sabelfeld (Eds.), Proc. ESORICS\u201906, Springer LNCS 4189, 2006, pp. 362\u2013383. [22] A.D. Jaggard, A. Scedrov, J.-K. Tsay, Computational sound mechanized proof of PKINIT for Kerberos, presented at FCC\u201907 (no proceedings) (2007). [23] B. Blanchet, A computationally sound mechanized prover for security protocols, in: IEEE Symposium on Security and Privacy, Oakland, CA, 2006, pp. 140\u2013154. [24] B. Blanchet, Computationally sound mechanized proofs of correspondence assertions, in: 20th IEEE Computer Security Foundations Symposium (CSF\u201907), IEEE, Venice, Italy, 2007, pp. 97\u2013111. [25] IETF, Public Key cryptography for initial authentication in Kerberos, RFC 4556, Preliminary versions available as a sequence of Internet Drafts at: <http://tools.ietf.org/wg/krb-wg/draft-ietf-cat-kerberos-pk-init/> (1996\u20132006). [26] CERT, Vulnerability Note 477341. Available from: <http://www.kb.cert.org/vuls/id/477341> (2005). [27] I. Cervesato, A.D. Jaggard, A. Scedrov, J.-K. Tsay, C. Walstad, Breaking and fixing public-key Kerberos, in: Proceedings of ASIAN\u201906, 2006, pp. 164\u2013178. [28] J. De Clercq, M. Balladelli, Windows 2000 authentication, <http://www.windowsitlibrary.com/Content/617/06/6.html>, digital Press (2001). [29] Cable Television Laboratories, Inc., PacketCable Security Specification, technical document PKT-SP-SEC-I11-040730 (2004). [30] S. Goldwasser S. Micali R.L. Rivest A digital signature scheme secure against adaptive chosen message attacks SIAM J. Comput. 17 1988 281 308 [31] I. Cervesato, Typed MSR: syntax and examples, in: Proc. MMM\u201901, Springer LNCS 2052, 2001, pp. 159\u2013177. [32] N.A. Durgin P. Lincoln J. Mitchell A. Scedrov Multiset rewriting and the complexity of bounded security protocols J. Comp. Security 12 2 2004 247 311 [33] W. Diffie P.C. van Oorschot M.J. Wiener Authentication and authenticated key exchanges Designs Codes Cryptogr. 2 2 1992 107 125 [34] R. Canetti, H. Krawczyk, Security analysis of IKE\u2019s signature-based key-exchange protocol, in: Proc. CRYPTO\u201902, Springer LNCS 2442, 2002, pp. 143\u2013161. [35] D. Harkins, D. Carrel, The Internet key exchange (IKE). Available from: <http://www.ietf.org/rfc/rfc2409> (November 1998). [36] G. Lowe, Breaking and fixing the Needham\u2013Schroeder public-key protocol using FDR, in: Proc. TACAS\u201996, Springer LNCS 1055, 1996, pp. 147\u2013166. [37] R. Needham M. Schroeder Using encryption for authentication in large networks of computers Comm. ACM 21 12 1978 993 999 [38] J. Clark J. Jacob On the security of recent protocols Inform. Process. Lett. 56 3 1995 151 155 [39] T. Hwang Y.-H. Chen On the security of SPLICE/AS\u2014the authentication system in WIDE internet Inform. Process. Lett. 53 2 1995 91 101 [40] M. Abadi R. Needham Prudent engineering practice for cryptographic protocols IEEE Trans. Software Eng. 22 1 1996 6 15 [41] K. Raeburn, Encryption and checksum specifications for Kerberos 5. Available from: <http://www.ietf.org/rfc/rfc3961.txt> (February 2005). [42] F. Butler, I. Cervesato, A.D. Jaggard, A. Scedrov, Confidentiality and authentication in Kerberos 5, Tech. Rep. MS-CIS-04-04, UPenn (2004). [43] I. Cervesato, A specification language for crypto-protocols based on multiset. Rewriting, dependent types and subsorting, in: G. Delzanno, S. Etalle, M. Gabbrielli (Eds.), Workshop on Specification, Analysis and Validation for Emerging Technologies\u2014SAVE\u201901, Paphos, Cyprus, 2001, pp. 1\u201322. [44] D. Dolev A. Yao On the security of public-key protocols IEEE Trans. Info. Theory 2 29 1983 198 208 [45] M. Backes, B. Pfitzmann, M. Waidner, A composable cryptographic library with nested operations, in: Proc. CCS\u201903, ACM, 2003, pp. 220\u2013230. [46] C. Sprenger, M. Backes, D. Basin, B. Pfitzmann, M. Waidner, Cryptographically sound theorem proving, in: Proc., CSFW \u201906, 2006, pp. 153\u2013166.", "scopus-id": "40149083066", "coredata": {"eid": "1-s2.0-S089054010700123X", "dc:description": "Abstract We report on a man-in-the-middle attack on PKINIT, the public key extension of the widely deployed Kerberos 5 authentication protocol. This flaw allows an attacker to impersonate Kerberos administrative principals (KDC) and end-servers to a client, hence breaching the authentication guarantees of Kerberos. It also gives the attacker the keys that the KDC would normally generate to encrypt the service requests of this client, hence defeating confidentiality as well. The discovery of this attack caused the IETF to change the specification of PKINIT and Microsoft to release a security update for some Windows operating systems. We discovered this attack as part of an ongoing formal analysis of the Kerberos protocol suite, and we have formally verified several possible fixes to PKINIT\u2014including the one adopted by the IETF\u2014that prevent our attack as well as other authentication and secrecy properties of Kerberos with PKINIT.", "openArchiveArticle": "true", "prism:coverDate": "2008-04-30", "openaccessUserLicense": "http://www.elsevier.com/open-access/userlicense/1.0/", "prism:aggregationType": "Journal", "prism:url": "https://api.elsevier.com/content/article/pii/S089054010700123X", "dc:creator": [{"@_fa": "true", "$": "Cervesato, Iliano"}, {"@_fa": "true", "$": "Jaggard, Aaron D."}, {"@_fa": "true", "$": "Scedrov, Andre"}, {"@_fa": "true", "$": "Tsay, Joe-Kai"}, {"@_fa": "true", "$": "Walstad, Christopher"}], "link": [{"@_fa": "true", "@rel": "self", "@href": "https://api.elsevier.com/content/article/pii/S089054010700123X"}, {"@_fa": "true", "@rel": "scidir", "@href": "https://www.sciencedirect.com/science/article/pii/S089054010700123X"}], "dc:format": "application/json", "openaccessType": "Full", "pii": "S0890-5401(07)00123-X", "prism:volume": "206", "prism:publisher": "Elsevier Inc.", "dc:title": "Breaking and fixing public-key Kerberos", "prism:copyright": "Copyright \u00a9 2007 Elsevier Inc. All rights reserved.", "prism:issueName": "Joint Workshop on Foundations of Computer Security and Automated Reasoning for Security Protocol Analysis (FCS-ARSPA \u201906)", "openaccess": "1", "prism:issn": "08905401", "prism:issueIdentifier": "2-4", "dcterms:subject": [{"@_fa": "true", "$": "Computer security"}, {"@_fa": "true", "$": "Authentication protocols"}, {"@_fa": "true", "$": "Kerberos"}, {"@_fa": "true", "$": "PKINIT"}, {"@_fa": "true", "$": "Man-in-the-middle attack"}, {"@_fa": "true", "$": "Protocol verification"}], "openaccessArticle": "true", "prism:publicationName": "Information and Computation", "prism:number": "2-4", "openaccessSponsorType": "ElsevierBranded", "prism:pageRange": "402-424", "prism:endingPage": "424", "prism:coverDisplayDate": "February\u2013April 2008", "prism:doi": "10.1016/j.ic.2007.05.005", "prism:startingPage": "402", "dc:identifier": "doi:10.1016/j.ic.2007.05.005", "openaccessSponsorName": null}, "link": {"@rel": "abstract", "@href": "https://api.elsevier.com/content/abstract/scopus_id/40149083066"}}